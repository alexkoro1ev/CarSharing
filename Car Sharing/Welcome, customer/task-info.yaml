type: edu
custom_name: "Welcome, customer!"
files:
- name: src/carsharing/Main.java
  visible: true
  text: |-
    package carsharing;

    public class Main {

        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/DatabaseUtil.java
  visible: false
  text: |
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;

    import java.sql.*;
    import java.util.HashMap;

    public class DatabaseUtil {

        private Connection connection = null;
        private static final String databaseFilePath = "./src/carsharing/db/carsharing";

        public Connection getConnection() {
            if (connection != null) {
                return connection;
            }
            try {
                connection = DriverManager.getConnection("jdbc:h2:" + databaseFilePath);
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't connect to the database.");
            }
            return connection;
        }

        public void closeConnection() {
            if (connection != null) {
                try {
                    connection.close();
                } catch (SQLException ignored) {
                    System.out.println(ignored.getErrorCode());
                    throw new WrongAnswer("Can't close connection to the database.");
                }
                connection = null;
            }
        }

        public ResultSet executeQuery(String query) {
            try {
                return getConnection().createStatement().executeQuery(query);
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public boolean ifTableExist(String tableName) {
            try {
                tableName = tableName.toUpperCase();
                ResultSet resultSet = executeQuery("SHOW TABLES");
                while (resultSet.next()) {
                    if (resultSet.getString("TABLE_NAME").equals(tableName)) {
                        return true;
                    }
                }
                return false;
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void ifColumnsExist(String tableName, String[][] columns) {
            try {
                ResultSet resultSet = getConnection()
                        .createStatement()
                        .executeQuery("SHOW COLUMNS FROM " + tableName.toUpperCase());

                HashMap<String, String> correctColumns = new HashMap<>();
                for (String[] column : columns) {
                    correctColumns.put(column[0], column[1]);
                }

                while (resultSet.next()) {
                    String columnName = resultSet.getString("FIELD");
                    if (correctColumns.containsKey(columnName)) {
                        if (!resultSet.getString("TYPE").contains(correctColumns.get(columnName))) {
                            throw new WrongAnswer("In the '" + tableName.toUpperCase() + "' table '" + columnName
                                    + "' column should be of " + correctColumns.get(columnName) + " type.");
                        }
                        correctColumns.remove(columnName);
                    }
                }
                if (!correctColumns.isEmpty()) {
                    throw new WrongAnswer("Can't find in '" + tableName.toUpperCase() + "' table the following columns: " + correctColumns.toString());
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void clearCompanyTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM COMPANY");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the COMPANY table.");
            }
        }

        public void clearCarTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CAR");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the CAR table.");
            }
        }

        public void clearCustomerTable() {
            try {
                getConnection().createStatement().execute("DELETE FROM CUSTOMER");
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't delete rows from the CUSTOMER table.");
            }
        }

        public void checkCompany(String name) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' company in the 'COMPANY' table\n" +
                            "Make sure you don't clear the database after starting the program");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }

        public void checkCar(String companyName, String carName) {
            try {
                PreparedStatement companyStatement = getConnection().prepareStatement("SELECT * FROM COMPANY WHERE NAME = ?");
                companyStatement.setString(1, companyName);

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);

                ResultSet resultSet = companyStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + companyName + "' company in the 'COMPANY' table.");
                }

                int id = resultSet.getInt("ID");

                resultSet = carStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }
                if (resultSet.getInt("COMPANY_ID") != id) {
                    throw new WrongAnswer("'COMPANY_ID' of the '" + carName + "' car is wrong. It should reference to the '" + companyName + "' company ID.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCustomer(String name, String carName) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM CUSTOMER WHERE NAME = ?");
                preparedStatement.setString(1, name);
                ResultSet resultSet = preparedStatement.executeQuery();
                if (!resultSet.next()) {
                    throw new WrongAnswer("Can't find '" + name + "' customer in the 'CUSTOMER' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }

                if (carName == null) {
                    if (resultSet.getString("RENTED_CAR_ID") != null) {
                        throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should be NULL");
                    }
                    return;
                }

                PreparedStatement carStatement = getConnection().prepareStatement("SELECT * FROM CAR WHERE NAME = ?");
                carStatement.setString(1, carName);
                ResultSet carResultSet = carStatement.executeQuery();

                if (!carResultSet.next()) {
                    throw new WrongAnswer("Can't find '" + carName + "' car in the 'CAR' table.\n" +
                            "Make sure you don't clear the database after starting the program");
                }

                int carId = carResultSet.getInt("ID");

                if (resultSet.getInt("RENTED_CAR_ID") != carId) {
                    throw new WrongAnswer("'RENTED_CAR_ID' of the '" + name + "' customer is wrong. It should reference to the '" + carName + "' car ID.");
                }
            } catch (SQLException ignored) {
                throw new WrongAnswer("Can't select data from the 'COMPANY' table!");
            }
        }


        public void checkCompanyColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'COMPANY' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'NAME' AND TABLE_NAME = 'COMPANY' AND CONSTRAINT_TYPE = 'UNIQUE'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have UNIQUE constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'COMPANY' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'COMPANY' table doesn't have NOT NULL constraint.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCarColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CAR' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'COMPANY_ID' AND TABLE_NAME = 'CAR' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table is not FOREIGN KEY. It should refer to 'ID' column of the 'COMPANY' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("COMPANY(ID)")) {
                    throw new WrongAnswer("Looks like 'COMPANY_ID' column in 'CAR' table doesn't refer to 'ID' column of the 'COMPANY' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }

        public void checkCustomerColumnProperties() {
            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'PRIMARY KEY'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'ID' column in 'CUSTOMER' table doesn't have PRIMARY KEY constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'NAME' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'NO'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'NAME' column in 'CUSTOMER' table doesn't have NOT NULL constraint.");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT * FROM INFORMATION_SCHEMA.COLUMNS" +
                        " WHERE COLUMN_NAME = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND IS_NULLABLE = 'YES'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table has NOT NULL constraint, but it shouldn't");
                }

                resultSet = getConnection().createStatement().executeQuery("SELECT  * FROM INFORMATION_SCHEMA.CONSTRAINTS" +
                        " WHERE COLUMN_LIST = 'RENTED_CAR_ID' AND TABLE_NAME = 'CUSTOMER' AND CONSTRAINT_TYPE = 'REFERENTIAL'");

                if (!resultSet.next()) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table is not FOREIGN KEY. It should refer to 'ID' column of the 'CAR' table.");
                }

                if (!resultSet.getString("SQL").replace("\"", "").contains("CAR(ID)")) {
                    throw new WrongAnswer("Looks like 'RENTED_CAR_ID' column in 'CUSTOMER' table doesn't refer to 'ID' column of the 'CAR' table.");
                }
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute query to the database.\n" +
                        "SQL Message:\n" + exception.getMessage());
            }
        }
    }
  learner_created: false
- name: test/CarSharingTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.BeforeClass;

    import java.io.File;

    public class CarSharingTest extends StageTest<Void> {

        private static final String databaseFileName = "src/carsharing/db/carsharing.mv.db";
        private static DatabaseUtil db = new DatabaseUtil();

        @BeforeClass
        public static void deleteDatabaseFile() {
            File file = new File(databaseFileName);

            if (!file.exists()) {
                return;
            }

            if (!file.delete()) {
                throw new WrongAnswer("Can't delete database file before starting your program.\n" +
                    "Make sure you close all the connections with the database file!");
            }
        }

        @DynamicTest(order = 1)
        public CheckResult test2_ifDatabaseExist() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            program.execute("0");

            if (!program.isFinished()) {
                return CheckResult.wrong("After choosing 'Exit' item your program should stop.");
            }

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("Can't find a database file. It should be named 'carsharing.mv.db'" +
                    " and located in /carsharing/db/ folder.\n" +
                    "The file should be created right after starting the program!");
            }

            return correct();
        }

        @DynamicTest(order = 2)
        public CheckResult test1_testMenu() {
            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("Start menu should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("Start menu should contain \"0. Exit\"");
            }

            output = program.execute("1");

            if (!output.contains("1. Company list")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '1. Company list' item");
            }

            if (!output.contains("2. Create a company")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '2. Create a company' item");
            }

            if (!output.contains("0. Back")) {
                return CheckResult.wrong("After choosing 'Log in as a manager' item you should print menu that contains '0. Back' item");
            }

            output = program.execute("0");

            if (!output.contains("1. Log in as a manager")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"1. Log in as a manager\"");
            }

            if (!output.contains("0. Exit")) {
                return CheckResult.wrong("After choosing '0. Back' item you should print previous menu and it should contain \"0. Exit\"");
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        public CheckResult test3_checkDatabaseConnection() {
            db.getConnection();
            return correct();
        }

        @DynamicTest(order = 4)
        public CheckResult test4_checkIfTableExists() {
            if (!db.ifTableExist("company")) {
                return wrong("Can't find table named 'company'");
            }
            if (!db.ifTableExist("car")) {
                return wrong("Can't find table named 'car'");
            }
            return correct();
        }

        @DynamicTest(order = 5)
        public CheckResult test5_checkTableColumns() {
            String[][] companyColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}};
            db.ifColumnsExist("company", companyColumns);
            db.checkCompanyColumnProperties();

            String[][] carColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"COMPANY_ID", "INT"}};
            db.ifColumnsExist("car", carColumns);
            db.checkCarColumnProperties();

            String[][] customerColumns = {{"ID", "INT"}, {"NAME", "VARCHAR"}, {"RENTED_CAR_ID", "INT"}};
            db.ifColumnsExist("customer", customerColumns);
            db.checkCustomerColumnProperties();
            return correct();
        }

        @DynamicTest(order = 6)
        public CheckResult test6_testAddCompany() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");

            db.clearCustomerTable();
            db.clearCarTable();
            db.clearCompanyTable();

            program.execute("1");
            String output = program.execute("1");

            if (!output.contains("The company list is empty")) {
                return wrong("If no company has been created you should print 'The company list is empty' when '1. Company list' item is chosen");
            }

            output = program.execute("2");

            if (!output.contains("Enter the company name")) {
                return wrong("After choosing '2. Create a company' item you should ask to enter a company name.\n" +
                    "Your output should contain 'Enter the company name:'");
            }

            program.execute("Super company");
            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected one company.\n" +
                    "Your output should contain '1. Super company'");
            }

            db.checkCompany("Super company");

            program.execute("0\n2\nAnother company");
            program.execute("2\nOne more company");

            db.checkCompany("Another company");
            db.checkCompany("One more company");

            output = program.execute("1");

            if (!output.contains("1. Super company")) {
                return wrong("In the company list expected 'Super company' company.\n" +
                    "Your output should contain '1. Super company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Another company")) {
                return wrong("In the company list expected 'Another company' company.\n" +
                    "Your output should contain '2. Another company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("3. One more company")) {
                return wrong("In the company list expected 'One more company' company.\n" +
                    "Your output should contain '2. One more company'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            program.execute("2");

            return correct();
        }

        @DynamicTest(order = 7)
        public CheckResult test7_testAddCar() {

            TestedProgram program = new TestedProgram();
            program.start("-databaseFileName", "carsharing");
            String output;

            db.clearCarTable();
            db.clearCompanyTable();
            db.clearCustomerTable();

            program.execute("1");
            program.execute("2");
            program.execute("Car To Go");
            program.execute("2");
            program.execute("Drive Now");

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected 'Car To Go' company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected 'Drive Now' company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Car list")) {
                return wrong("After choosing company you should print menu that contains '1. Car list' item");
            }

            if (!output.contains("2. Create a car")) {
                return wrong("After choosing company you should print menu that contains '2. Create a car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing company you should print menu that contains '0. Back' item");
            }

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            output = program.execute("2");

            if (!output.contains("Enter the car name:")) {
                return wrong("After choosing 'Create a car' item you should ask to enter a car name. " +
                    "Your output should contain 'Enter the car name:'");
            }

            program.execute("Hyundai Venue");
            db.checkCar("Car To Go", "Hyundai Venue");

            program.execute("2");
            program.execute("Maruti Suzuki Dzire");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            program.execute("0");

            program.execute("1");
            program.execute("2");

            output = program.execute("1");

            if (!output.contains("The car list is empty!")) {
                return wrong("If no cars were added to the company you should print 'The car list is empty!'");
            }

            program.execute("2");
            program.execute("Lamborghini Urraco");

            output = program.execute("1");

            if (!output.contains("1. Lamborghini Urraco")) {
                return wrong("In the car list expected 'Lamborghini Urraco' car.\n" +
                    "Your output should contain '1. Lamborghini Urraco'");
            }

            if (output.contains("Hyundai Venue")) {
                return wrong("Your output contains 'Hyundai Venue'. This car is from another company");
            }

            if (output.contains("Maruti Suzuki Dzire")) {
                return wrong("Your output contains 'Maruti Suzuki Dzire'. This car is from another company");
            }

            db.checkCar("Drive Now", "Lamborghini Urraco");

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        @DynamicTest(order = 8)
        public CheckResult test8_testAddCustomer() {

            TestedProgram program = new TestedProgram();
            String output = program.start("-databaseFileName", "carsharing");

            db.clearCustomerTable();

            if (!output.contains("2. Log in as a customer")) {
                return wrong("Start menu should contain \"2. Log in as a customer\"");
            }

            if (!output.contains("3. Create a customer")) {
                return wrong("Start menu should contain \"3. Create a customer\"");
            }

            output = program.execute("2");

            if (!output.contains("The customer list is empty!")) {
                return wrong("If no customers were created you should print 'The customer list is empty!'");
            }

            output = program.execute("3");

            if (!output.contains("Enter the customer name:")) {
                return wrong("After choosing '3. Create a customer' option you should ask to enter a customer name.\n" +
                    "Your output should contain 'Enter the customer name:'");
            }

            program.execute("First customer");
            db.checkCustomer("First customer", null);

            program.execute("3");
            output = program.execute("Second customer");
            db.checkCustomer("Second customer", null);

            if (!output.contains("2. Log in as a customer")) {
                return wrong("After creating a customer you should print main menu again.\n" +
                    "Your output should contain '2. Log in as a customer'");
            }

            output = program.execute("2");


            if (!output.contains("1. First customer")) {
                return wrong("In the customer list expected 'First customer' customer.\n" +
                    "Your output should contain '1. First customer'\n" +
                    "Customers should be sorted by 'ID' column");
            }

            if (!output.contains("2. Second customer")) {
                return wrong("In the customer list expected 'Second customer' customer.\n" +
                    "Your output should contain '2. Second customer'\n" +
                    "Customers should be sorted by 'ID' column");
            }

            output = program.execute("1");

            if (!output.contains("1. Rent a car")) {
                return wrong("After choosing customer you should print menu that contains '1. Rent a car' item");
            }

            if (!output.contains("2. Return a rented car")) {
                return wrong("After choosing customer you should print menu that contains '2. Return a rented car' item");
            }

            if (!output.contains("3. My rented car")) {
                return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
            }

            if (!output.contains("0. Back")) {
                return wrong("After choosing customer you should print menu that contains '3. My rented car' item");
            }

            output = program.execute("3");

            if (!output.contains("You didn't rent a car!")) {
                return wrong("After choosing '3. My rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
            }

            output = program.execute("2");

            if (!output.contains("You didn't rent a car!")) {
                return wrong("After choosing '2. Return a rented car' option you should print 'You didn't rent a car!' if a customer didn't rent a car.");
            }

            return correct();
        }

        @DynamicTest(order = 9)
        public CheckResult test9_testRentCar() {

            TestedProgram program = new TestedProgram();
            String output;
            program.start("-databaseFileName", "carsharing");

            db.checkCustomer("First customer", null);
            db.checkCustomer("Second customer", null);

            db.checkCompany("Car To Go");
            db.checkCompany("Drive Now");

            db.checkCar("Drive Now", "Lamborghini Urraco");
            db.checkCar("Car To Go", "Hyundai Venue");
            db.checkCar("Car To Go", "Maruti Suzuki Dzire");

            program.execute("2");
            program.execute("1");

            output = program.execute("1");

            if (!output.contains("1. Car To Go")) {
                return wrong("In the company list expected 'Car To Go' company.\n" +
                    "Your output should contain '1. Car To Go'.\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("2. Drive Now")) {
                return wrong("In the company list expected 'Drive Now' company.\n" +
                    "Your output should contain '2. Drive Now'\n" +
                    "Companies should be sorted by 'ID' column");
            }

            if (!output.contains("0. Back")) {
                return wrong("There is no back option in the company list.\n" +
                    "Your output should contain '0. Back'");
            }

            output = program.execute("1");

            if (!output.contains("1. Hyundai Venue")) {
                return wrong("In the car list expected 'Hyundai Venue' car.\n" +
                    "Your output should contain '1. Hyundai Venue'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            if (!output.contains("2. Maruti Suzuki Dzire")) {
                return wrong("In the car list expected 'Maruti Suzuki Dzire' car.\n" +
                    "Your output should contain '2. Maruti Suzuki Dzire'\n" +
                    "Cars should be sorted by 'ID' column");
            }

            output = program.execute("1");

            if (!output.contains("You rented 'Hyundai Venue'")) {
                return wrong("After renting 'Hyundai Venue' you shoul print 'You rented 'Hyundai Venue'");
            }

            db.checkCustomer("First customer", "Hyundai Venue");

            if (!output.contains("3. My rented car")) {
                return wrong("After renting a car you should print menu that contains '3. My rented car' option.");
            }

            output = program.execute("3");

            if (!output.contains("Hyundai Venue")) {
                return wrong("After choosing '3. My rented car' option expected car name is 'Hyundai Venue'");
            }

            if (!output.contains("Car To Go")) {
                return wrong("After choosing '3. My rented car' option expected company name is 'Car To Go'");
            }

            output = program.execute("1");

            if (!output.contains("You've already rented a car!")) {
                return wrong("If a customer has already rented a car and is trying to rent another one you should print 'You've already rented a car!'");
            }

            output = program.execute("2");

            if (!output.contains("You've returned a rented car!")) {
                return wrong("If a customer has already returned a rented car and is trying to return another one you should print 'You've returned a rented car!'");
            }

            db.checkCustomer("First customer", null);

            program.execute("0");
            program.execute("0");

            return correct();
        }

        @DynamicTest(order = 10)
        public CheckResult test10_testRentedCarInList() {

            TestedProgram program = new TestedProgram();
            String output;
            program.start("-databaseFileName", "carsharing");

            program.execute("2");
            program.execute("2");
            program.execute("1");
            program.execute("1");
            program.execute("1");
            program.execute("0");

            program.execute("2");
            program.execute("1");
            program.execute("1");

            output = program.execute("1");
            if (output.contains("Hyundai Venue")) {
                return wrong("You shouldn't print out a car if it is already rented!");
            }

            program.execute("0");
            program.execute("0");
            program.execute("0");

            return correct();
        }

        private CheckResult wrong(String message) {
            db.closeConnection();
            return CheckResult.wrong(message);
        }

        private CheckResult correct() {
            db.closeConnection();
            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/carsharing/old/controller/menu_actions/MainMenu.java
  visible: true
  text: |
    package carsharing.controller.menu_actions;


    import carsharing.utils.Console;
    import carsharing.view.View;

    import java.io.IOException;

    public class MainMenu extends Action {

        private final View view;
        public MainMenu(View view) {
            super();
            this.view = view;
        }

        @Override
        public void execute() {
            try {
                int action = view.showMainMenu();
                switch (action) {
                    case 0 -> setState(MenuState.TERMINATE);
                    case 1 -> setState(MenuState.MANAGER);
                    default -> Console.writeLine("Wrong command. Choose another one.");
                }
            } catch (IOException e) {
                Console.writeLine("You should enter numbers.");
            }
        }
    }
  learner_created: true
- name: src/carsharing/old/controller/menu_actions/CustomerCreatorMenu.java
  visible: true
  learner_created: true
- name: src/carsharing/old/model/Customer.java
  visible: true
  learner_created: true
- name: src/carsharing/old/db/carsharing.trace.db
  visible: true
  text: "2022-11-09 14:07:57 jdbc[10]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"INSERT INTO COMPANY (NAME)VALUES (SUPER COMPANY[*]);\"\
    ; expected \"(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE,\
    \ REGEXP, IS, IN, BETWEEN, AND, OR, ,, )\"; SQL statement:\nINSERT INTO company\
    \ (name)VALUES (Super company); [42001-200]\n2022-11-12 09:42:48 jdbc[4]: exception\n\
    org.h2.jdbc.JdbcSQLSyntaxErrorException: Cannot drop \"COMPANY\" because \"FK_COMPANY\"\
    \ depends on it; SQL statement:\nDROP TABLE IF EXISTS company [90107-200]\n\t\
    at org.h2.message.DbException.getJdbcSQLException(DbException.java:576)\n\tat\
    \ org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\tat org.h2.message.DbException.get(DbException.java:205)\n\
    \tat org.h2.command.ddl.DropTable.prepareDrop(DropTable.java:98)\n\tat org.h2.command.ddl.DropTable.update(DropTable.java:124)\n\
    \tat org.h2.command.CommandContainer.update(CommandContainer.java:198)\n\tat org.h2.command.Command.executeUpdate(Command.java:251)\n\
    \tat org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:228)\n\tat org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)\n\
    \tat carsharing.controller.Controller.newDBCreateQuery(Controller.java:70)\n\t\
    at carsharing.controller.Controller.createDatabase(Controller.java:61)\n\tat carsharing.controller.Controller.<init>(Controller.java:23)\n\
    \tat carsharing.CarSharing.<init>(CarSharing.java:12)\n\tat carsharing.Main.main(Main.java:9)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\
    \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2022-11-12 09:42:48 jdbc[9]:\
    \ exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Cannot drop \"COMPANY\"\
    \ because \"FK_COMPANY\" depends on it; SQL statement:\nDROP TABLE IF EXISTS company\
    \ [90107-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:576)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.command.ddl.DropTable.prepareDrop(DropTable.java:98)\n\
    \tat org.h2.command.ddl.DropTable.update(DropTable.java:124)\n\tat org.h2.command.CommandContainer.update(CommandContainer.java:198)\n\
    \tat org.h2.command.Command.executeUpdate(Command.java:251)\n\tat org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:228)\n\
    \tat org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)\n\tat carsharing.controller.Controller.newDBCreateQuery(Controller.java:70)\n\
    \tat carsharing.controller.Controller.createDatabase(Controller.java:61)\n\tat\
    \ carsharing.controller.Controller.<init>(Controller.java:23)\n\tat carsharing.CarSharing.<init>(CarSharing.java:12)\n\
    \tat carsharing.Main.main(Main.java:9)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2022-11-12 09:42:49 jdbc[10]:\
    \ null\norg.h2.message.DbException: The connection was not closed by the application\
    \ and is garbage collected [90018-200]\n\tat org.h2.message.DbException.get(DbException.java:205)\n\
    \tat org.h2.message.DbException.get(DbException.java:181)\n\tat org.h2.message.DbException.get(DbException.java:170)\n\
    \tat org.h2.jdbc.JdbcConnection.closeOld(JdbcConnection.java:245)\n\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:186)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n\tat org.h2.Driver.connect(Driver.java:69)\n\
    \tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:681)\n\t\
    at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:252)\n\tat\
    \ carsharing.controller.Controller.<init>(Controller.java:25)\n\tat carsharing.CarSharing.<init>(CarSharing.java:12)\n\
    \tat carsharing.Main.main(Main.java:9)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLNonTransientConnectionException:\
    \ The connection was not closed by the application and is garbage collected [90018-200]\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:622)\n\t\
    at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t...\
    \ 23 more\n2022-11-12 09:42:49 jdbc[10]: null\norg.h2.message.DbException: The\
    \ connection was not closed by the application and is garbage collected [90018-200]\n\
    \tat org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.message.DbException.get(DbException.java:170)\n\tat org.h2.jdbc.JdbcConnection.closeOld(JdbcConnection.java:245)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:186)\n\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n\
    \tat org.h2.Driver.connect(Driver.java:69)\n\tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:681)\n\
    \tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:252)\n\t\
    at carsharing.controller.Controller.<init>(Controller.java:25)\n\tat carsharing.CarSharing.<init>(CarSharing.java:12)\n\
    \tat carsharing.Main.main(Main.java:9)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLNonTransientConnectionException:\
    \ The connection was not closed by the application and is garbage collected [90018-200]\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:622)\n\t\
    at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t...\
    \ 23 more\n2022-11-12 09:45:08 jdbc[4]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Cannot drop \"COMPANY\" because \"FK_COMPANY\" depends on it; SQL statement:\n\
    DROP TABLE IF EXISTS company [90107-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:576)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.command.ddl.DropTable.prepareDrop(DropTable.java:98)\n\
    \tat org.h2.command.ddl.DropTable.update(DropTable.java:124)\n\tat org.h2.command.CommandContainer.update(CommandContainer.java:198)\n\
    \tat org.h2.command.Command.executeUpdate(Command.java:251)\n\tat org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:228)\n\
    \tat org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)\n\tat carsharing.controller.Controller.newDBCreateQuery(Controller.java:70)\n\
    \tat carsharing.controller.Controller.createDatabase(Controller.java:61)\n\tat\
    \ carsharing.controller.Controller.<init>(Controller.java:23)\n\tat carsharing.CarSharing.<init>(CarSharing.java:12)\n\
    \tat carsharing.Main.main(Main.java:9)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2022-11-12 09:45:09 jdbc[9]:\
    \ exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Cannot drop \"COMPANY\"\
    \ because \"FK_COMPANY\" depends on it; SQL statement:\nDROP TABLE IF EXISTS company\
    \ [90107-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:576)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.command.ddl.DropTable.prepareDrop(DropTable.java:98)\n\
    \tat org.h2.command.ddl.DropTable.update(DropTable.java:124)\n\tat org.h2.command.CommandContainer.update(CommandContainer.java:198)\n\
    \tat org.h2.command.Command.executeUpdate(Command.java:251)\n\tat org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:228)\n\
    \tat org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)\n\tat carsharing.controller.Controller.newDBCreateQuery(Controller.java:70)\n\
    \tat carsharing.controller.Controller.createDatabase(Controller.java:61)\n\tat\
    \ carsharing.controller.Controller.<init>(Controller.java:23)\n\tat carsharing.CarSharing.<init>(CarSharing.java:12)\n\
    \tat carsharing.Main.main(Main.java:9)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2022-11-12 09:45:09 jdbc[10]:\
    \ null\norg.h2.message.DbException: The connection was not closed by the application\
    \ and is garbage collected [90018-200]\n\tat org.h2.message.DbException.get(DbException.java:205)\n\
    \tat org.h2.message.DbException.get(DbException.java:181)\n\tat org.h2.message.DbException.get(DbException.java:170)\n\
    \tat org.h2.jdbc.JdbcConnection.closeOld(JdbcConnection.java:245)\n\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:186)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n\tat org.h2.Driver.connect(Driver.java:69)\n\
    \tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:681)\n\t\
    at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:252)\n\tat\
    \ carsharing.controller.Controller.<init>(Controller.java:25)\n\tat carsharing.CarSharing.<init>(CarSharing.java:12)\n\
    \tat carsharing.Main.main(Main.java:9)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLNonTransientConnectionException:\
    \ The connection was not closed by the application and is garbage collected [90018-200]\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:622)\n\t\
    at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t...\
    \ 23 more\n2022-11-12 09:45:09 jdbc[10]: null\norg.h2.message.DbException: The\
    \ connection was not closed by the application and is garbage collected [90018-200]\n\
    \tat org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.message.DbException.get(DbException.java:170)\n\tat org.h2.jdbc.JdbcConnection.closeOld(JdbcConnection.java:245)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:186)\n\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n\
    \tat org.h2.Driver.connect(Driver.java:69)\n\tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:681)\n\
    \tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:252)\n\t\
    at carsharing.controller.Controller.<init>(Controller.java:25)\n\tat carsharing.CarSharing.<init>(CarSharing.java:12)\n\
    \tat carsharing.Main.main(Main.java:9)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLNonTransientConnectionException:\
    \ The connection was not closed by the application and is garbage collected [90018-200]\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:622)\n\t\
    at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t...\
    \ 23 more\n2022-11-12 09:45:09 jdbc[10]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Syntax error in SQL statement \"INSERT INTO CAR(NAME, COMPANY_ID) VALUES (ANOTHER\
    \ COMPANY[*], 1);\"; expected \"(, ., [, ::, AT, FORMAT, *, /, %, +, -, ||, ~,\
    \ !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, OR, ,, )\"; SQL statement:\n\
    INSERT INTO car(name, company_id) VALUES (Another company, 1); [42001-200]\n2022-11-12\
    \ 09:51:24 jdbc[4]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Cannot\
    \ drop \"COMPANY\" because \"FK_COMPANY\" depends on it; SQL statement:\nDROP\
    \ TABLE IF EXISTS company [90107-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:576)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.command.ddl.DropTable.prepareDrop(DropTable.java:98)\n\
    \tat org.h2.command.ddl.DropTable.update(DropTable.java:124)\n\tat org.h2.command.CommandContainer.update(CommandContainer.java:198)\n\
    \tat org.h2.command.Command.executeUpdate(Command.java:251)\n\tat org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:228)\n\
    \tat org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)\n\tat carsharing.controller.Controller.newDBCreateQuery(Controller.java:70)\n\
    \tat carsharing.controller.Controller.createDatabase(Controller.java:61)\n\tat\
    \ carsharing.controller.Controller.<init>(Controller.java:23)\n\tat carsharing.CarSharing.<init>(CarSharing.java:12)\n\
    \tat carsharing.Main.main(Main.java:9)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2022-11-12 09:51:24 jdbc[9]:\
    \ exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException: Cannot drop \"COMPANY\"\
    \ because \"FK_COMPANY\" depends on it; SQL statement:\nDROP TABLE IF EXISTS company\
    \ [90107-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:576)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.command.ddl.DropTable.prepareDrop(DropTable.java:98)\n\
    \tat org.h2.command.ddl.DropTable.update(DropTable.java:124)\n\tat org.h2.command.CommandContainer.update(CommandContainer.java:198)\n\
    \tat org.h2.command.Command.executeUpdate(Command.java:251)\n\tat org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:228)\n\
    \tat org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)\n\tat carsharing.controller.Controller.newDBCreateQuery(Controller.java:70)\n\
    \tat carsharing.controller.Controller.createDatabase(Controller.java:61)\n\tat\
    \ carsharing.controller.Controller.<init>(Controller.java:23)\n\tat carsharing.CarSharing.<init>(CarSharing.java:12)\n\
    \tat carsharing.Main.main(Main.java:9)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n2022-11-12 09:51:24 jdbc[10]:\
    \ null\norg.h2.message.DbException: The connection was not closed by the application\
    \ and is garbage collected [90018-200]\n\tat org.h2.message.DbException.get(DbException.java:205)\n\
    \tat org.h2.message.DbException.get(DbException.java:181)\n\tat org.h2.message.DbException.get(DbException.java:170)\n\
    \tat org.h2.jdbc.JdbcConnection.closeOld(JdbcConnection.java:245)\n\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:186)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n\tat org.h2.Driver.connect(Driver.java:69)\n\
    \tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:681)\n\t\
    at java.sql/java.sql.DriverManager.getConnection(DriverManager.java:252)\n\tat\
    \ carsharing.controller.Controller.<init>(Controller.java:25)\n\tat carsharing.CarSharing.<init>(CarSharing.java:12)\n\
    \tat carsharing.Main.main(Main.java:9)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLNonTransientConnectionException:\
    \ The connection was not closed by the application and is garbage collected [90018-200]\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:622)\n\t\
    at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t...\
    \ 23 more\n2022-11-12 09:51:24 jdbc[10]: null\norg.h2.message.DbException: The\
    \ connection was not closed by the application and is garbage collected [90018-200]\n\
    \tat org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.message.DbException.get(DbException.java:181)\n\
    \tat org.h2.message.DbException.get(DbException.java:170)\n\tat org.h2.jdbc.JdbcConnection.closeOld(JdbcConnection.java:245)\n\
    \tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:186)\n\tat org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:152)\n\
    \tat org.h2.Driver.connect(Driver.java:69)\n\tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:681)\n\
    \tat java.sql/java.sql.DriverManager.getConnection(DriverManager.java:252)\n\t\
    at carsharing.controller.Controller.<init>(Controller.java:25)\n\tat carsharing.CarSharing.<init>(CarSharing.java:12)\n\
    \tat carsharing.Main.main(Main.java:9)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\nCaused by: org.h2.jdbc.JdbcSQLNonTransientConnectionException:\
    \ The connection was not closed by the application and is garbage collected [90018-200]\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:622)\n\t\
    at org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t...\
    \ 23 more\n2022-11-12 09:51:24 jdbc[12]: exception\norg.h2.jdbc.JdbcSQLSyntaxErrorException:\
    \ Cannot drop \"COMPANY\" because \"FK_COMPANY\" depends on it; SQL statement:\n\
    DROP TABLE IF EXISTS company [90107-200]\n\tat org.h2.message.DbException.getJdbcSQLException(DbException.java:576)\n\
    \tat org.h2.message.DbException.getJdbcSQLException(DbException.java:429)\n\t\
    at org.h2.message.DbException.get(DbException.java:205)\n\tat org.h2.command.ddl.DropTable.prepareDrop(DropTable.java:98)\n\
    \tat org.h2.command.ddl.DropTable.update(DropTable.java:124)\n\tat org.h2.command.CommandContainer.update(CommandContainer.java:198)\n\
    \tat org.h2.command.Command.executeUpdate(Command.java:251)\n\tat org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:228)\n\
    \tat org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:201)\n\tat carsharing.controller.Controller.newDBCreateQuery(Controller.java:70)\n\
    \tat carsharing.controller.Controller.createDatabase(Controller.java:61)\n\tat\
    \ carsharing.controller.Controller.<init>(Controller.java:23)\n\tat carsharing.CarSharing.<init>(CarSharing.java:12)\n\
    \tat carsharing.Main.main(Main.java:9)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native\
    \ Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\
    \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\
    \tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.invokeMain(MainMethodExecutor.java:160)\n\
    \tat org.hyperskill.hstest.testing.execution.MainMethodExecutor.lambda$launch$1(MainMethodExecutor.java:188)\n\
    \tat java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)\n\
    \tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\n\tat\
    \ java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)\n\
    \tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)\n\
    \tat java.base/java.lang.Thread.run(Thread.java:833)\n"
  learner_created: true
- name: src/carsharing/old/db/carsharing
  visible: true
  learner_created: true
- name: src/carsharing/old/controller/menu_actions/MenuState.java
  visible: true
  text: |
    package carsharing.controller.menu_actions;

    public enum MenuState {
        TERMINATE,
        MAIN,
        MANAGER
    }
  learner_created: true
- name: src/carsharing/old/controller/menu_actions/CustomerMenu.java
  visible: true
  learner_created: true
- name: src/carsharing/old/utils/Const.java
  visible: true
  text: |
    package carsharing.utils;

    public class Const {
        public static final String PATH = "./src/carsharing/db/";
        public static final String DB_URL = "jdbc:h2:file:" + PATH;
        public static final String DRIVER = "org.h2.Driver";
    }
  learner_created: true
- name: src/carsharing/old/model/Company.java
  visible: true
  text: |
    package carsharing.model;

    public class Company {

        private int id;
        private String name;

        public Company(int id, String name) {
            this.id = id;
            this.name = name;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }
    }
  learner_created: true
- name: src/carsharing/old/model/dao/CompanyDAOImpl.java
  visible: true
  text: |
    package carsharing.model.dao;

    import carsharing.model.Company;

    import java.util.ArrayList;
    import java.util.List;

    public class CompanyDAOImpl implements CompanyDAO {

        List<Company> companies;

        public CompanyDAOImpl() {
            this.companies = new ArrayList<>();

        }

        @Override
        public List<Company> getAllCompanies() {
            return companies;
        }

        @Override
        public Company getCompany(int id) {
            return companies.get(id);
        }

        @Override
        public void updateCompany(Company company) {
            companies.get(company.getId()).setName(company.getName());
        }

        @Override
        public void deleteCompany(Company company) {
            companies.remove(company.getId());
        }

        @Override
        public void addCompany(Company company) {
            companies.add(company);
        }
    }
  learner_created: true
- name: src/carsharing/old/model/dao/CompanyDAO.java
  visible: true
  text: |
    package carsharing.model.dao;

    import carsharing.model.Company;

    import java.util.List;

    public interface CompanyDAO {
        List<Company> getAllCompanies();
        Company getCompany(int id);
        void updateCompany(Company company);
        void deleteCompany(Company company);
        void addCompany(Company company);
    }
  learner_created: true
- name: src/carsharing/old/view/View.java
  visible: true
  text: |
    package carsharing.view;

    import carsharing.model.Car;
    import carsharing.model.Company;
    import carsharing.utils.Console;

    import java.io.IOException;
    import java.util.List;

    public class View {

        public View() {
        }

        public int showMainMenu() throws IOException {
            Console.writeLine("1. Log in as a manager");
            Console.writeLine("0. Exit");
            return Console.readInt();
        }

        public int showManagerMenu() throws IOException {
            Console.writeLine("1. Company list");
            Console.writeLine("2. Create a company");
            Console.writeLine("0. Back");
            return Console.readInt();
        }

        public Company showCompanyList(List<Company> list) throws IOException {
            if (!list.isEmpty()) {
                Console.writeLine("Choose the company:");
                for (Company company : list) {
                    Console.writeLine(company.getId() + ". " + company.getName());
                }
                Console.writeLine("0. Back");
                int chosen = Console.readInt();
                if (chosen == 0) {
                    return null;
                }

                return list.get(chosen - 1);
            } else {
                Console.writeLine("The company list is empty!\n");
                return null;
            }
        }

        public void showCarList(List<Car> list) {
            if (!list.isEmpty()) {
                Console.writeLine("Car list:");
                for (Car car : list) {
                    Console.writeLine(car.getId() + ". " + car.getName());
                }
            } else {
                Console.writeLine("The car list is empty!\n");
            }
        }

        public int showCompanyMenu(String companyName) throws IOException {
            Console.writeLine("'" + companyName + "'" + " company:");
            Console.writeLine("1. Car list");
            Console.writeLine("2. Create a car");
            Console.writeLine("0. Back");
            return Console.readInt();
        }

        public String showCreateDialog(String o) throws IOException {
            Console.writeLine("Enter the " + o + " name:");
            return Console.readLine();
        }
    }
  learner_created: true
- name: src/carsharing/old/utils/Console.java
  visible: true
  text: |
    package carsharing.utils;

    import java.io.BufferedReader;
    import java.io.IOException;
    import java.io.InputStreamReader;

    public class Console {
        private static final BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        public static String readLine() throws IOException {
            return br.readLine();
        }

        public static void writeLine(String line) {
            System.out.println(line);
        }

        public static void write(String line) {
            System.out.print(line);
        }

        public static int readInt() throws IOException {
            return Integer.parseInt(br.readLine());
        }
    }
  learner_created: true
- name: src/carsharing/old/model/Car.java
  visible: true
  text: |-
    package carsharing.model;

    public class Car {

        private int id;
        private String name;
        private int company_id;

        public Car(int id, String name, int company_id) {
            this.id = id;
            this.name = name;
            this.company_id = company_id;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getCompany_id() {
            return company_id;
        }

        public void setCompany_id(int company_id) {
            this.company_id = company_id;
        }
    }
  learner_created: true
- name: src/carsharing/old/controller/Controller.java
  visible: true
  text: |
    package carsharing.controller;

    import carsharing.controller.menu_actions.Action;
    import carsharing.controller.menu_actions.MenuState;
    import carsharing.utils.Const;

    import java.io.File;
    import java.io.IOException;
    import java.sql.Connection;
    import java.sql.DriverManager;
    import java.sql.SQLException;
    import java.sql.Statement;

    public class Controller {
        private final String dbUrl;
        private final Connection connection;
        private boolean finished;

        public Controller(String[] args) throws IOException, SQLException {
            this.finished = false;
            File dbFile = getDBFile(args);
            dbUrl = Const.DB_URL + dbFile.getName();
            createDatabase(dbFile);

            connection = DriverManager.getConnection(dbUrl);
        }

        public void makeAction() throws IOException, SQLException {
            Action action = Action.getAction();
            if (Action.getState() == MenuState.TERMINATE) {
                setFinished(true);
            } else {
                action.setConnection(connection);
                action.execute();
            }
        }

        private File getDBFile(String[] args) {
            File dbFile = null;
            if (args.length != 0) {
                for (int i = 0; i < args.length; i++) {
                    if ("-databaseFileName".equals(args[i]) && args[i + 1] != null) {
                        dbFile = new File(Const.PATH + args[i + 1]);
                        break;
                    }
                }
            }

            if (dbFile == null) {
                dbFile = new File(Const.PATH + "database.mv.db");
            }

            return dbFile;
        }

        @SuppressWarnings("ResultOfMethodCallIgnored")
        private void createDatabase(File dbFile) throws IOException {
            new File(Const.PATH).mkdirs();
            dbFile.createNewFile();

            newDBCreateQuery();
        }

        private void newDBCreateQuery() {
            try (Connection connection = DriverManager.getConnection(dbUrl);
                 Statement statement = connection.createStatement()) {
                Class.forName(Const.DRIVER);
                connection.setAutoCommit(true);

                statement.execute("DROP TABLE IF EXISTS car");
                statement.execute("DROP TABLE IF EXISTS company");


                statement.execute("CREATE TABLE IF NOT EXISTS company(" +
                        "id INT PRIMARY KEY AUTO_INCREMENT," +
                        "name VARCHAR(75) UNIQUE NOT NULL" +
                        ");");

                statement.execute("CREATE TABLE IF NOT EXISTS car(" +
                        "id INT PRIMARY KEY AUTO_INCREMENT," +
                        "name VARCHAR(75) UNIQUE NOT NULL," +
                        "company_id INT NOT NULL," +
                        "CONSTRAINT fk_company FOREIGN KEY (company_id)" +
                        "REFERENCES company(id)" +
                        ");");
            } catch (ClassNotFoundException | SQLException e) {
                e.printStackTrace();
            }
        }

        public boolean isFinished() {
            return finished;
        }

        public void setFinished(boolean finished) {
            this.finished = finished;
        }
    }
  learner_created: true
- name: src/carsharing/old/controller/menu_actions/Action.java
  visible: true
  text: |
    package carsharing.controller.menu_actions;

    import carsharing.view.View;

    import java.io.IOException;
    import java.sql.Connection;
    import java.sql.SQLException;

    public abstract class Action {

        private static MenuState menuState = MenuState.MAIN;
        private static final View view = new View();
        private Connection connection;


        public Action() {
        }

        public static Action getAction() {
            MenuState state = getState();
            return switch (state) {
                case MAIN -> new MainMenu(view);
                case MANAGER -> new ManagerMenu(view);
                default -> null;
            };
        }

        public static MenuState getState() {
            return menuState;
        }

        static void setState(MenuState state) {
            Action.menuState = state;
        }

        public abstract void execute() throws IOException;

        public void setConnection(Connection connection) throws SQLException {
            this.connection = connection;
            this.connection.setAutoCommit(true);
        }

        public Connection getConnection() {
            return connection;
        }
    }
  learner_created: true
- name: src/carsharing/old/controller/menu_actions/ManagerMenu.java
  visible: true
  text: |
    package carsharing.controller.menu_actions;

    import carsharing.model.Car;
    import carsharing.model.Company;
    import carsharing.utils.Console;
    import carsharing.view.View;

    import java.io.IOException;
    import java.sql.ResultSet;
    import java.sql.SQLException;
    import java.sql.Statement;
    import java.util.ArrayList;
    import java.util.List;

    public class ManagerMenu extends Action {

        private final View view;

        public ManagerMenu(View view) {
            super();
            this.view = view;
        }

        @Override
        public void execute() {
            try {
                int action = view.showManagerMenu();
                switch (action) {
                    case 0 -> setState(MenuState.MAIN);
                    case 1 -> companyList();
                    case 2 -> createCompany();
                }
            } catch (IOException e) {
                Console.writeLine("You should enter numbers.");
            }
        }

        private void companyList() {
            List<Company> list;
            try (Statement statement = getConnection().createStatement()) {
                String query = "SELECT * FROM company";
                ResultSet result = statement.executeQuery(query);
                list = convertCompanyResultSetToList(result);
                Company chosenCompany = view.showCompanyList(list);
                if (chosenCompany != null) {
                    companyMenu(chosenCompany);
                }

            } catch (SQLException e) {
                Console.writeLine("showCompanyList method. SQL Exception caught");
                e.printStackTrace();
            } catch (IOException e) {
                Console.writeLine("showCompanyList method. IOException caught");
                e.printStackTrace();
                ;
            }
        }

        private void companyMenu(Company company) {
            try {
                int action = view.showCompanyMenu(company.getName());
                while (action > 0) {
                    switch (action) {
                        case 1 -> carList(company);
                        case 2 -> createCar(company);
                    }
                    action = view.showCompanyMenu(company.getName());
                }
            } catch (IOException e) {
                Console.writeLine("You should enter numbers.");
            }
        }

        private List<Company> convertCompanyResultSetToList(ResultSet set) throws SQLException {
            List<Company> list = new ArrayList<>();
            while (set.next()) {
                int id = set.getInt("id");
                String name = set.getString("name");

                Company company = new Company(id, name);
                list.add(company);
            }
            return list;
        }

        private List<Car> convertCarResultSetToList(ResultSet set) throws SQLException {
            List<Car> list = new ArrayList<>();
            int counter = 1;
            while (set.next()) {
                int id = counter;
                String name = set.getString("name");
                int company_id = set.getInt("company_id");

                Car car = new Car(id, name, company_id);
                list.add(car);
                counter++;
            }
            return list;
        }

        private void createCompany() throws IOException {
            String newCompanyName = view.showCreateDialog("company");

            try (Statement statement = getConnection().createStatement()) {
                String query = "INSERT INTO company(name) VALUES ('" + newCompanyName + "');";

                statement.execute(query);
                Console.writeLine("The company was created!\n");
            } catch (SQLException e) {
                Console.writeLine("createCompany method. SQL Exception caught");
                e.printStackTrace();
            }
        }

        private void carList(Company company) {
            List<Car> list;
            try (Statement statement = getConnection().createStatement()) {
                String query = "SELECT * FROM car WHERE company_id = " + company.getId() + ";";
                ResultSet result = statement.executeQuery(query);
                list = convertCarResultSetToList(result);
                view.showCarList(list);

            } catch (SQLException e) {
                Console.writeLine("showCompanyList method. SQL Exception caught");
                e.printStackTrace();
            }
        }

        private void createCar(Company company) throws IOException {
            String newCarName = view.showCreateDialog("car");
            try (Statement statement = getConnection().createStatement()) {
                String query = "INSERT INTO car(name, company_id) " +
                        String.format("VALUES ('%s', %d);", newCarName, company.getId());

                statement.execute(query);
                Console.writeLine("The car was added!\n");
            } catch (SQLException e) {
                Console.writeLine("createCar method. SQL Exception caught");
                e.printStackTrace();
            }
        }
    }
  learner_created: true
- name: src/carsharing/CarSharing.java
  visible: true
  text: |
    package carsharing;

    import carsharing.controller.Controller;

    import java.io.IOException;
    import java.sql.SQLException;

    public class CarSharing {
        final Controller controller;

        public CarSharing(String[] args) throws IOException, SQLException {
            this.controller = new Controller(args);
        }

        public void run() throws IOException, SQLException {
            while (!controller.isFinished()) {
                controller.makeAction();
            }
        }
    }
  learner_created: true
- name: src/carsharing/db/carsharing.trace.db
  visible: true
  learner_created: true
- name: src/carsharing/controllers/DBController.java
  visible: true
  learner_created: true
- name: src/carsharing/controllers/CustomerController.java
  visible: true
  learner_created: true
- name: src/carsharing/controllers/ManagerController.java
  visible: true
  learner_created: true
- name: src/carsharing/controllers/Controller.java
  visible: true
  learner_created: true
- name: src/carsharing/controllers/Controlling.java
  visible: true
  learner_created: true
- name: src/carsharing/models/entities/Car.java
  visible: true
  learner_created: true
- name: src/carsharing/models/entities/Customer.java
  visible: true
  learner_created: true
- name: src/carsharing/models/entities/Entity.java
  visible: true
  learner_created: true
- name: src/carsharing/models/Manager.java
  visible: true
  learner_created: true
- name: src/carsharing/models/entities/Company.java
  visible: true
  learner_created: true
- name: src/carsharing/utility/Console.java
  visible: true
  learner_created: true
- name: src/carsharing/utility/Constants.java
  visible: true
  learner_created: true
- name: src/carsharing/view/View.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11504#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: "Fri, 18 Nov 2022 19:25:31 UTC"
record: -1
